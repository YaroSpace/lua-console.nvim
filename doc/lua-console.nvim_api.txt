==============================================================================
------------------------------------------------------------------------------
                                                                    *to_table()*

`to_table`({obj})

Parameters ~
    {obj} `(string|string[])`

Return ~
`(string[])`

------------------------------------------------------------------------------
                                                           *show_virtual_text()*

`show_virtual_text`({buf}, {id}, {text}, {lnum}, {position}, {highlight})


virtual text in the buffer
Parameters ~
    {buf} `(number)` buffer
    {id} `(number)` namespace id
    {text} `(string)` text to show
    {lnum} `(number)` line number
    {position} `(string)` virtual text position
    {highlight} `(string)` higlight group

------------------------------------------------------------------------------
                                                          *load_saved_console()*

`load_saved_console`({buf})


saved console
Parameters ~
    {buf} `(number)`

------------------------------------------------------------------------------
                                                              *get_assignment()*

`get_assignment`({line})


if there is an assigment on the line and returns its value
Parameters ~
    {line} `(string[])`

------------------------------------------------------------------------------
                                                       *append_current_buffer()*

`append_current_buffer`({buf}, {lines})

Parameters ~
    {buf} `(number)`
    {lines} `(string[])` Text to append to current buffer after current selection

------------------------------------------------------------------------------
                                                                *pretty_print()*

`pretty_print`({...})


prints objects and appends to print_buffer
Parameters ~
    {...} `(any[])`

Return ~
`(string[])`

------------------------------------------------------------------------------
                                                            *clean_stacktrace()*

`clean_stacktrace`({error})

Remove the stacktrace preceeding the call from lua-console

------------------------------------------------------------------------------
                                                               *lua_evaluator()*

`lua_evaluator`({lines}, {ctx})

Evaluates Lua code and returns pretty printed result with errors if any
@param lines string[] table with lines of Lua code
@param ctx? table environment to execute code in
@return string[]

------------------------------------------------------------------------------
                                                             *default_handler()*

`default_handler`({buf}, {_}, {lang_config})


default handler for processing external evaluator's output
Parameters ~
    {buf} `(number)`
    {_} `(string)` 'out|err'
    {lang_config} `(table)`

Return ~
`(function)` function(err, result)

------------------------------------------------------------------------------
                                                      *get_external_evaluator()*

`get_external_evaluator`({buf}, {lang})


external evaluator for requested language
Parameters ~
    {lang} `(string)`

Return ~
`(function|nil)` evaluator function(lines:string[]):string[]

------------------------------------------------------------------------------
                                                                    *get_lang()*

`get_lang`({buf}, {range})

the language of the code/console/buffer

lines array to remove the lang_prefix
Parameters ~
    {buf} `(number)`
    {range} `(number[])`

Return ~
`(string)`

------------------------------------------------------------------------------
                                                         *eval_code_in_buffer()*

`eval_code_in_buffer`({buf}, {full})


code in the current line or visual selection and appends to buffer
Parameters ~
    {buf} `(number)`
    {full} `(optional)` `(boolean)` evaluate full buffer

------------------------------------------------------------------------------
                                                               *load_messages()*

`load_messages`({buf})

messages into console

------------------------------------------------------------------------------
                                                               *attach_toggle()*

`attach_toggle`({buf})


evaluator (mappings and context) to a buffer
Parameters ~
    {buf} `(optional)` `(number)` buffer number, current buffer is used if omitted

WARNING: This file is auto-generated. Do not edit it!

 vim:tw=78:ts=8:noet:ft=help:norl: